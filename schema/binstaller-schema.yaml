$schema: https://json-schema.org/draft/2020-12/schema
$id: InstallSpec.json
type: object
properties:
  schema:
    type: string
    default: v1
    description: Schema version
  name:
    type: string
    description: Binary name (defaults to repository name if not specified)
  repo:
    type: string
    pattern: ^[^/]+/[^/]+$
    description: GitHub repository in format 'owner/repo'
  default_version:
    type: string
    default: latest
    description: Default version to install
  default_bin_dir:
    type: string
    default: ${BINSTALLER_BIN:-${HOME}/.local/bin}
    description: Default binary installation directory
  asset:
    $ref: '#/$defs/AssetConfig'
    description: Asset download configuration
  checksums:
    $ref: '#/$defs/ChecksumConfig'
    description: Checksum verification configuration
  unpack:
    $ref: '#/$defs/UnpackConfig'
    description: Archive extraction configuration
  supported_platforms:
    type: array
    items:
      $ref: '#/$defs/Platform'
    description: List of supported OS/architecture combinations
required:
  - repo
  - asset
description: |-
  Configuration specification for binstaller binary installation.

  This is the root configuration that defines how to download, verify,
  and install binaries from GitHub releases.

  Minimal example:
  ```yaml
  schema: v1
  repo: owner/project
  asset:
    template: "${NAME}_${VERSION}_${OS}_${ARCH}.tar.gz"
  ```

  Complete example with all features:
  ```yaml
  schema: v1
  name: mytool
  repo: myorg/mytool
  default_version: latest
  default_bin_dir: ${HOME}/.local/bin

  # Asset configuration with platform-specific rules
  asset:
    template: "${NAME}_${VERSION}_${OS}_${ARCH}${EXT}"
    default_extension: .tar.gz
    binaries:
      - name: mytool
        path: mytool
      - name: mytool-helper
        path: bin/mytool-helper
    rules:
      # Windows gets .zip extension
      - when:
          os: windows
        ext: .zip
      # macOS uses different naming
      - when:
          os: darwin
        os: macOS
        ext: .zip
      # Special handling for M1 Macs
      - when:
          os: darwin
          arch: arm64
        template: "${NAME}_${VERSION}_${OS}_${ARCH}_signed${EXT}"
    naming_convention:
      os: lowercase
    arch_emulation:
      rosetta2: true

  # Security features
  checksums:
    algorithm: sha256
    template: "${NAME}_${VERSION}_checksums.txt"
    embedded_checksums:
      "1.0.0":
        - filename: "mytool_1.0.0_linux_amd64.tar.gz"
          hash: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"

  # Archive handling
  unpack:
    strip_components: 1

  # Platform restrictions
  supported_platforms:
    - os: linux
      arch: amd64
    - os: linux
      arch: arm64
    - os: darwin
      arch: amd64
    - os: darwin
      arch: arm64
    - os: windows
      arch: amd64
  ```
$defs:
  AssetConfig:
    type: object
    properties:
      template:
        type: string
        description: |-
          Filename template with placeholders.

          Available placeholders:
          - ${NAME}: Binary name (from 'name' field or repository name)
          - ${VERSION}: Version to install (without 'v' prefix, e.g., '1.0.0')
          - ${TAG}: Original tag with 'v' prefix if present (e.g., 'v1.0.0')
          - ${OS}: Operating system (e.g., 'linux', 'darwin', 'windows')
          - ${ARCH}: Architecture (e.g., 'amd64', 'arm64', '386')
          - ${EXT}: File extension (from 'default_extension' or rules)

          Examples:
          - "${NAME}_${VERSION}_${OS}_${ARCH}.tar.gz"
          - "${NAME}-${VERSION}-${OS}-${ARCH}${EXT}"
          - "v${VERSION}/${NAME}_${OS}_${ARCH}.zip"
      default_extension:
        type: string
        description: |-
          Default file extension when not specified in template.
          This is used when the template contains ${EXT} placeholder.
          Common values: '.tar.gz', '.zip', '.exe'
          If not set and template uses ${EXT}, it defaults to empty string.
      binaries:
        type: array
        items:
          $ref: '#/$defs/Binary'
        description: |-
          Binary names and their paths within the asset.

          For archives: Specify the path within the extracted directory.

          If not specified, defaults to a single binary with:
          - name: The repository name
          - path: The repository name
      rules:
        type: array
        items:
          $ref: '#/$defs/AssetRule'
        description: |-
          Platform-specific overrides.
          Rules are evaluated in order, and ALL matching rules are applied cumulatively.
          Later rules can override values set by earlier rules.
          Use this to handle special cases for specific OS/arch combinations.
      naming_convention:
        $ref: '#/$defs/NamingConvention'
        description: Controls the casing of placeholder values
      arch_emulation:
        $ref: '#/$defs/ArchEmulation'
        description: Architecture emulation configuration
    required:
      - template
    description: |-
      Configuration for constructing download URLs and asset names.

      The asset configuration determines how to build the download URL for each platform.
      It uses a template system with placeholders that are replaced with actual values.
  ChecksumConfig:
    type: object
    properties:
      algorithm:
        anyOf:
          - type: string
            const: sha256
          - type: string
            const: sha512
          - type: string
            const: sha1
          - type: string
            const: md5
        default: sha256
        description: |-
          Hash algorithm used for checksums.
          Must match the algorithm used by the project's checksum files.
          Most projects use sha256.
      template:
        type: string
        description: |-
          Template for checksum filename.

          If specified, binstaller will download this file to verify checksums.
          Uses the same placeholders as asset templates.

          Common patterns:
          - "${NAME}_${VERSION}_checksums.txt"
          - "checksums.txt"
          - "${NAME}-${VERSION}-SHA256SUMS"

          Leave empty to rely only on embedded checksums.
      embedded_checksums:
        $ref: '#/$defs/RecordArrayEmbeddedChecksum'
        description: |-
          Pre-verified checksums organized by version.

          Use 'binst embed-checksums' command to automatically populate this.
          The key is the version string (includes 'v' prefix if present in tag, e.g., 'v1.0.0').
          The value is an array of filename/hash pairs.

          This allows offline installation and protects against
          compromised checksum files.
    description: |-
      Checksum verification configuration.

      Binstaller verifies downloaded files using checksums to ensure integrity.
      It can either download checksum files from the release or use pre-verified
      checksums embedded in the configuration.

      Example:
      ```yaml
      checksums:
        algorithm: sha256
        template: "${NAME}_${VERSION}_checksums.txt"
        embedded_checksums:
          "1.0.0":
            - filename: "mytool_1.0.0_linux_amd64.tar.gz"
              hash: "abc123..."
            - filename: "mytool_1.0.0_darwin_amd64.tar.gz"
              hash: "def456..."
      ```
  UnpackConfig:
    type: object
    properties:
      strip_components:
        type: integer
        minimum: 0
        maximum: 2147483647
        default: 0
        description: |-
          Number of leading path components to strip when extracting.

          Similar to tar's --strip-components option.
          Useful when archives have an extra top-level directory.

          Examples:
          - 0 (default): Extract as-is
          - 1: Remove first directory level (e.g., "mytool-v1.0.0/bin/mytool" â†’ "bin/mytool")
          - 2: Remove first two directory levels
    description: |-
      Archive extraction configuration.

      Controls how archives are extracted during installation.
      Primarily used to handle archives with unnecessary directory nesting.

      Example:
      ```yaml
      # Archive structure: mytool-v1.0.0/bin/mytool
      # We want just: bin/mytool
      unpack:
        strip_components: 1
      ```
  Platform:
    type: object
    properties:
      os:
        anyOf:
          - type: string
            const: linux
          - type: string
            const: darwin
          - type: string
            const: windows
          - type: string
            const: freebsd
          - type: string
            const: openbsd
          - type: string
            const: netbsd
          - type: string
            const: dragonfly
          - type: string
            const: solaris
          - type: string
            const: android
          - type: string
            const: aix
          - type: string
            const: illumos
          - type: string
            const: ios
          - type: string
            const: js
          - type: string
            const: plan9
          - type: string
            const: wasip1
        description: |-
          Operating system identifier.

          Values are based on Go's GOOS (runtime.GOOS) and compatible with
          shlib's uname_os.sh: https://github.com/client9/shlib/blob/master/uname_os.sh

          Common values:
          - "linux" - Linux distributions
          - "darwin" - macOS
          - "windows" - Windows
          - "freebsd", "openbsd", "netbsd" - BSD variants
          - "android" - Android

          Full list from go tool dist list:
      arch:
        anyOf:
          - type: string
            const: amd64
          - type: string
            const: arm64
          - type: string
            const: "386"
          - type: string
            const: arm
          - type: string
            const: armv5
          - type: string
            const: armv6
          - type: string
            const: armv7
          - type: string
            const: ppc64
          - type: string
            const: ppc64le
          - type: string
            const: mips
          - type: string
            const: mipsle
          - type: string
            const: mips64
          - type: string
            const: mips64le
          - type: string
            const: s390x
          - type: string
            const: riscv64
          - type: string
            const: loong64
          - type: string
            const: wasm
          - type: string
            const: amd64p32
        description: |-
          CPU architecture identifier.

          Values are based on Go's GOARCH (runtime.GOARCH) and compatible with
          shlib's uname_arch.sh: https://github.com/client9/shlib/blob/master/uname_arch_check.sh

          Common values:
          - "amd64" (x86_64) - 64-bit x86
          - "arm64" (aarch64) - 64-bit ARM
          - "386" (i386) - 32-bit x86
          - "arm" - 32-bit ARM (base)

          ARM variants with version:
          - "armv5" - ARM v5
          - "armv6" - ARM v6 (e.g., Raspberry Pi 1)
          - "armv7" - ARM v7 (e.g., Raspberry Pi 2)

          Less common:
          - "ppc64", "ppc64le" - PowerPC 64-bit
          - "mips", "mipsle", "mips64", "mips64le" - MIPS architectures
          - "s390x" - IBM Z architecture
          - "riscv64" - RISC-V 64-bit
          - "loong64" - LoongArch 64-bit
          - "wasm" - WebAssembly
          - "amd64p32" - AMD64 with 32-bit pointers
    required:
      - os
      - arch
    description: |-
      Supported OS and architecture combination.

      Defines a specific platform that the binary supports.
      Used to restrict installation to known-working platforms.

      Example:
      ```yaml
      supported_platforms:
        - os: linux
          arch: amd64
        - os: linux
          arch: arm64
        - os: darwin
          arch: amd64
        - os: darwin
          arch: arm64
        - os: windows
          arch: amd64
      ```
  Binary:
    type: object
    properties:
      name:
        type: string
        description: |-
          Name of the binary to install.
          This will be the filename created in the installation directory.
      path:
        type: string
        description: |-
          Path to the binary within the extracted archive.

          The path relative to the archive root.

          Examples:
          - "mytool" - Binary at archive root
          - "bin/mytool" - Binary in bin subdirectory
    required:
      - name
      - path
    description: |-
      Binary name and path configuration.

      Defines which binary files to install from the downloaded asset.
      For single binary releases, this is straightforward.
      For releases with multiple binaries, you can specify which ones to install.

      Examples:
      - Single binary in archive: {name: "mytool", path: "mytool"}
      - Binary in subdirectory: {name: "mytool", path: "bin/mytool"}
      - Multiple binaries: [{name: "tool1", path: "tool1"}, {name: "tool2", path: "tool2"}]
  AssetRule:
    type: object
    properties:
      when:
        $ref: '#/$defs/PlatformCondition'
        description: |-
          Condition for applying this rule.
          All specified fields must match for the rule to apply.
          If a field is not specified, it matches any value.
      template:
        type: string
        description: |-
          Override template for matching platforms.
          This completely replaces the default template when the rule matches.
      os:
        type: string
        description: |-
          Override OS value for matching platforms.
          This changes the ${OS} placeholder value in the template.
          Useful when the release uses different OS naming (e.g., 'mac' instead of 'darwin').
      arch:
        type: string
        description: |-
          Override architecture value for matching platforms.
          This changes the ${ARCH} placeholder value in the template.
          Useful when the release uses different arch naming (e.g., 'x64' instead of 'amd64').
      ext:
        type: string
        description: |-
          Override extension for matching platforms.
          This changes the ${EXT} placeholder value in the template.
          Common values: '.tar.gz', '.zip', '.exe'
      binaries:
        type: array
        items:
          $ref: '#/$defs/Binary'
        description: |-
          Override binary configuration for matching platforms.
          This replaces the default binary configuration when the rule matches.
          Useful when different platforms have different binary names or paths.
    required:
      - when
    description: "Platform-specific asset configuration override.\n\nRules are evaluated in order, and ALL matching rules are applied sequentially.\nEach matching rule's overrides are applied cumulatively, with later rules\noverriding values set by earlier rules.\n\nA rule matches when all specified conditions in 'when' are met.\n\nExample:\n```yaml\nrules:\n  # Rule 1: Windows gets .zip extension\n  - when:\n      os: windows\n    ext: .zip\n  \n  # Rule 2: Darwin is renamed to macOS\n  - when:\n      os: darwin\n    os: macOS\n  \n  # Rule 3: Darwin also gets .zip (cumulative with rule 2)\n  - when:\n      os: darwin\n    ext: .zip\n  \n  # Rule 4: Darwin arm64 gets special template (cumulative with rules 2 & 3)\n  - when:\n      os: darwin\n      arch: arm64\n    template: \"${NAME}_${VERSION}_${OS}_${ARCH}_signed${EXT}\"\n```\n\nIn this example, for darwin/arm64:\n- Rule 2 changes OS to \"macOS\"\n- Rule 3 changes extension to \".zip\"\n- Rule 4 changes the entire template\n- Final result uses all these changes"
  NamingConvention:
    type: object
    properties:
      os:
        anyOf:
          - type: string
            const: lowercase
          - type: string
            const: titlecase
        default: lowercase
        description: |-
          Casing for ${OS} placeholder.

          - lowercase (default): "linux", "darwin", "windows"
          - titlecase: "Linux", "Darwin", "Windows"
      arch:
        type: string
        const: lowercase
        default: lowercase
        description: |-
          Casing for ${ARCH} placeholder.

          Currently only supports lowercase.
          Values like "amd64", "arm64", "386".
    description: |-
      Controls the casing of template placeholders.

      Some projects use different casing conventions in their release filenames.
      This provides a simpler alternative to using rules for common cases like
      titlecase OS names.

      Example:
      ```yaml
      naming_convention:
        os: titlecase  # "Darwin" instead of "darwin"
        arch: lowercase  # "amd64" (default)
      ```
  ArchEmulation:
    type: object
    properties:
      rosetta2:
        type: boolean
        default: false
        description: |-
          Use amd64 binaries instead of arm64 when Rosetta 2 is available on macOS.

          Useful when:
          - arm64 binaries are not available
          - x86_64 binaries are more stable or feature-complete
          - You need compatibility with x86_64-only dependencies

          The installer will detect Rosetta 2 and download amd64 binaries
          on Apple Silicon Macs when this is enabled.
    description: |-
      Architecture emulation configuration.

      Handles cases where binaries can run on different architectures
      through emulation layers.

      Example:
      ```yaml
      arch_emulation:
        rosetta2: true  # Use x86_64 binaries on Apple Silicon Macs
      ```
  RecordArrayEmbeddedChecksum:
    type: object
    properties: {}
    unevaluatedProperties:
      type: array
      items:
        $ref: '#/$defs/EmbeddedChecksum'
  PlatformCondition:
    type: object
    properties:
      os:
        type: string
        description: |-
          Match specific operating system.

          If specified, the rule only applies when the runtime OS matches.
          If omitted, the rule matches any OS.

          Can be any string value to support custom OS identifiers.
          See Platform.os for common values.
      arch:
        type: string
        description: |-
          Match specific architecture.

          If specified, the rule only applies when the runtime architecture matches.
          If omitted, the rule matches any architecture.

          Can be any string value to support custom architecture identifiers.
          See Platform.arch for common values.
    description: |-
      Condition for matching specific platforms in rules.

      Used in the 'when' clause of asset rules to specify which
      platforms the rule should apply to. Note that matching uses
      the original OS and architecture values, not any overridden
      values from previous rules.

      Example:
      ```yaml
      when:
        os: darwin
        arch: arm64
      ```
  EmbeddedChecksum:
    type: object
    properties:
      filename:
        type: string
        description: |-
          Asset filename exactly as it appears in the release.
          This must match the filename generated by the asset template.
      hash:
        type: string
        description: |-
          Checksum hash value in hexadecimal format.
          The format depends on the algorithm specified in ChecksumConfig.
          For sha256: 64 hex characters, for sha512: 128 hex characters, etc.
    required:
      - filename
      - hash
    description: |-
      Pre-verified checksum for a specific asset.

      Stores the checksum hash for a specific file.
      These are typically populated using 'binst embed-checksums' command.

      Example:
      ```yaml
      filename: "mytool_1.0.0_linux_amd64.tar.gz"
      hash: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
      ```
