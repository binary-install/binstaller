#!/bin/sh
# Code generated by binstaller. DO NOT EDIT.
#
set -e
usage() {
  this=$1
  cat <<EOF
$this: download ${NAME} from ${REPO}

Usage: $this [-b bindir] [-d] [tag]
  -b sets bindir or installation directory, Defaults to ./bin
  -d turns on debug logging
   [tag] is a tag from
   https://github.com/charmbracelet/gum/releases
   If tag is missing, then the latest will be used.

 Generated by binstaller
  https://github.com/haya14busa/binstaller
EOF
  exit 2
}

cat /dev/null <<EOF
------------------------------------------------------------------------
https://github.com/client9/shlib - portable posix shell functions
Public domain - http://unlicense.org
https://github.com/client9/shlib/blob/master/LICENSE.md
but credit (and pull requests) appreciated.
------------------------------------------------------------------------
EOF
is_command() {
  command -v "$1" >/dev/null
}
echoerr() {
  echo "$@" 1>&2
}
_logp=6
log_set_priority() {
  _logp="$1"
}
log_priority() {
  if test -z "$1"; then
    echo "$_logp"
    return
  fi
  [ "$1" -le "$_logp" ]
}
log_tag() {
  case $1 in
    0) echo "emerg" ;;
    1) echo "alert" ;;
    2) echo "crit" ;;
    3) echo "err" ;;
    4) echo "warning" ;;
    5) echo "notice" ;;
    6) echo "info" ;;
    7) echo "debug" ;;
    *) echo "$1" ;;
  esac
}
log_debug() {
  log_priority 7 || return 0
  echoerr "$(log_prefix)" "$(log_tag 7)" "$@"
}
log_info() {
  log_priority 6 || return 0
  echoerr "$(log_prefix)" "$(log_tag 6)" "$@"
}
log_err() {
  log_priority 3 || return 0
  echoerr "$(log_prefix)" "$(log_tag 3)" "$@"
}
log_crit() {
  log_priority 2 || return 0
  echoerr "$(log_prefix)" "$(log_tag 2)" "$@"
}
uname_os() {
  os=$(uname -s | tr '[:upper:]' '[:lower:]')
  case "$os" in
    msys*) os="windows" ;;
    mingw*) os="windows" ;;
    cygwin*) os="windows" ;;
  esac
  if [ "$os" = "sunos" ]; then
    if [ "$(uname -o)" = "illumos" ]; then
      os="illumos"
    else
      os="solaris"
    fi
  fi
  echo "$os"
}
uname_arch() {
  arch=$(uname -m)
  case $arch in
    x86_64) arch="amd64" ;;
    i86pc) arch="amd64" ;;
    x86) arch="386" ;;
    i686) arch="386" ;;
    i386) arch="386" ;;
    aarch64) arch="arm64" ;;
    armv5*) arch="armv5" ;;
    armv6*) arch="armv6" ;;
    armv7*) arch="armv7" ;;
  esac
  echo "${arch}"
}
uname_os_check() {
  os=$(uname_os)
  case "$os" in
    darwin) return 0 ;;
    dragonfly) return 0 ;;
    freebsd) return 0 ;;
    linux) return 0 ;;
    android) return 0 ;;
    midnightbsd) return 0 ;;
    nacl) return 0 ;;
    netbsd) return 0 ;;
    openbsd) return 0 ;;
    plan9) return 0 ;;
    solaris) return 0 ;;
    illumos) return 0 ;;
    windows) return 0 ;;
  esac
  log_crit "uname_os_check '$(uname -s)' got converted to '$os' which is not a GOOS value. Please file bug at https://github.com/client9/shlib"
  return 1
}
uname_arch_check() {
  arch=$(uname_arch)
  case "$arch" in
    386) return 0 ;;
    amd64) return 0 ;;
    arm64) return 0 ;;
    armv5) return 0 ;;
    armv6) return 0 ;;
    armv7) return 0 ;;
    ppc64) return 0 ;;
    ppc64le) return 0 ;;
    mips) return 0 ;;
    mipsle) return 0 ;;
    mips64) return 0 ;;
    mips64le) return 0 ;;
    s390x) return 0 ;;
    amd64p32) return 0 ;;
  esac
  log_crit "uname_arch_check '$(uname -m)' got converted to '$arch' which is not a GOARCH value.  Please file bug report at https://github.com/client9/shlib"
  return 1
}
http_download_curl() {
  local_file=$1
  source_url=$2
  header=$3
  if [ -z "$header" ]; then
    curl -fsSL -o "$local_file" "$source_url"
  else
    curl -fsSL -H "$header" -o "$local_file" "$source_url"
  fi
}
http_download_wget() {
  local_file=$1
  source_url=$2
  header=$3
  if [ -z "$header" ]; then
    wget -q -O "$local_file" "$source_url"
  else
    wget -q --header "$header" -O "$local_file" "$source_url"
  fi
}
http_download() {
  log_debug "http_download $2"
  if is_command curl; then
    http_download_curl "$@"
    return
  elif is_command wget; then
    http_download_wget "$@"
    return
  fi
  log_crit "http_download unable to find wget or curl"
  return 1
}
http_copy() {
  tmp=$(mktemp)
  http_download "${tmp}" "$1" "$2" || return 1
  body=$(cat "$tmp")
  rm -f "${tmp}"
  echo "$body"
}
github_release() {
  owner_repo=$1
  version=$2
  test -z "$version" && version="latest"
  giturl="https://github.com/${owner_repo}/releases/${version}"
  json=$(http_copy "$giturl" "Accept:application/json")
  test -z "$json" && return 1
  version=$(echo "$json" | tr -s '\n' ' ' | sed 's/.*"tag_name":"//' | sed 's/".*//')
  test -z "$version" && return 1
  echo "$version"
}
cat /dev/null <<EOF
------------------------------------------------------------------------
End of functions from https://github.com/client9/shlib
------------------------------------------------------------------------
EOF


hash_sha256() {
  TARGET=${1:-/dev/stdin}
  if is_command gsha256sum; then
    hash=$(gsha256sum "$TARGET") || return 1
    echo "$hash" | cut -d ' ' -f 1
  elif is_command sha256sum; then
    hash=$(sha256sum "$TARGET") || return 1
    echo "$hash" | cut -d ' ' -f 1
  elif is_command shasum; then
    hash=$(shasum -a 256 "$TARGET" 2>/dev/null) || return 1
    echo "$hash" | cut -d ' ' -f 1
  elif is_command openssl; then
    hash=$(openssl dgst -sha256 "$TARGET") || return 1
    echo "$hash" | cut -d ' ' -f 2
  else
    log_crit "hash_sha256 unable to find command to compute sha-256 hash"
    return 1
  fi
}

hash_verify() {
  hash_verify_internal "$1" "$2" hash_sha256
}


untar() {
  tarball=$1
  strip_components=${2:-0} # default 0
  case "${tarball}" in
  *.tar.gz | *.tgz) tar --no-same-owner -xzf "${tarball}" --strip-components "${strip_components}" ;;
  *.tar.xz) tar --no-same-owner -xJf "${tarball}" --strip-components "${strip_components}" ;;
  *.tar.bz2) tar --no-same-owner -xjf "${tarball}" --strip-components "${strip_components}" ;;
  *.tar) tar --no-same-owner -xf "${tarball}" --strip-components "${strip_components}" ;;
  *.gz) gunzip "${tarball}" ;;
  *.zip)
    # unzip doesn't have a standard --strip-components
    # Workaround: extract to a subdir and move contents up if stripping
    if [ "$strip_components" -gt 0 ]; then
      extract_dir=$(basename "${tarball%.zip}")_extracted
      unzip -q "${tarball}" -d "${extract_dir}"
      # Move contents of the *first* directory found inside extract_dir up
      # This assumes wrap_in_directory=true convention
      first_subdir=$(find "${extract_dir}" -mindepth 1 -maxdepth 1 -type d -print -quit)
      if [ -n "$first_subdir" ]; then
        # Move all contents (* includes hidden files)
        mv "${first_subdir}"/* .
        # Optionally remove the now-empty subdir and the extract_dir
        rmdir "${first_subdir}"
        rmdir "${extract_dir}"
      else
        log_warn "Could not find subdirectory in zip to strip components from ${extract_dir}"
        # Files are extracted in current dir anyway, proceed
      fi
    else
      unzip -q "${tarball}"
    fi
    ;;
  *)
    log_err "untar unknown archive format for ${tarball}"
    return 1
    ;;
  esac
}

extract_hash() {
  TARGET=$1
  checksums=$2
  if [ -z "$checksums" ]; then
    log_err "extract_hash checksum file not specified in arg2"
    return 1
  fi
  BASENAME=${TARGET##*/}
  grep -E "([[:space:]]|/|\*)${BASENAME}$" "${checksums}" 2>/dev/null | tr '\t' ' ' | cut -d ' ' -f 1
}

hash_verify_internal() {
  TARGET_PATH=$1
  SUMFILE=$2
  HASH_FUNC=$3
  if [ -z "${SUMFILE}" ]; then
    log_err "hash_verify_internal checksum file not specified in arg2"
    return 1
  fi
  if [ -z "${HASH_FUNC}" ]; then
    log_err "hash_verify_internal hash func not specified in arg3"
    return 1
  fi
  got=$($HASH_FUNC "$TARGET_PATH")
  if [ -z "${got}" ]; then
    log_err "failed to calculate hash: ${TARGET_PATH}"
    return 1
  fi
  # 1) “hash-only” line?
  if grep -i -E "^${got}[[:space:]]*$" "$SUMFILE" >/dev/null 2>&1; then
    return 0
  fi
  # 2) Check hash & file name match
  want=$(extract_hash "${TARGET_PATH}" "${SUMFILE}")
  if [ "$want" != "$got" ]; then
    log_err "hash_verify checksum for '$TARGET_PATH' did not verify ${want} vs ${got}"
    return 1
  fi
}


# --- Embedded Checksums (Format: VERSION:FILENAME:HASH) ---
EMBEDDED_CHECKSUMS="
0.16.0:gum_0.16.0_Linux_armv7.tar.gz.sbom.json:b763e1a6496fd048e9d523f774f728ed61af948f2e4a4fb80cc653e88567b661
0.16.0:gum_0.16.0_Openbsd_arm64.tar.gz:1ded43b72966b6dc2a80596811253d6f743ed35555cf69c1b0524c91f813e270
0.16.0:gum_0.16.0_Openbsd_i386.tar.gz:1e7a9fce7adbb996dc4e1c3ceaac8a778bf713c55256af25bed61ef0ed2a5ced
0.16.0:gum_0.16.0_aarch64.apk:3ab1ae3c167e91fb523f3934649b22a7132ed47dee29f708d83f3dfcfc633bbe
0.16.0:gum_0.16.0_armhf.apk:73d485177f2c538d13432624b9705fd9d16d07aafe0d004b9c00bef38c9f7ddd
0.16.0:gum_0.16.0_Netbsd_i386.tar.gz:b1da30530a2292a2d17ae4900ca06777e9c64a3004dd3cf315d45897acecaae3
0.16.0:gum_0.16.0_armv7.apk:85bf403e580643858760f478d6d7150b6958ba43b4124f2021db782a3bd55b93
0.16.0:gum_0.16.0_Freebsd_armv6.tar.gz:84aad8e0b346d3b94520f20a4fa763bb048f9ae8ee147d214587285a6aa27786
0.16.0:gum_0.16.0_Freebsd_x86_64.tar.gz.sbom.json:56f57e85e14d7cc8278cf4a745282976fb41119200ce5ad3ab446148c635c81d
0.16.0:gum_0.16.0_Openbsd_i386.tar.gz.sbom.json:5699633129d2ab53f7132906a4f5e66c346f9778be22140fe4ae883886034ed5
0.16.0:gum_0.16.0_Linux_arm64.tar.gz.sbom.json:1714ae9cc55931ba7f2d00916fe6013ba181a11dac9a1046750bb6761531fe6f
0.16.0:gum_0.16.0_Openbsd_x86_64.tar.gz:0bbc03148b90dee93f393863d986aa60474a83ba59a768c9ec9b74896ab86db1
0.16.0:gum_0.16.0_arm64.deb:e1eed06cd8f27b21977ba1b403fd3749d8625ad3e1a0d6ad10a6a24a22e39f2b
0.16.0:gum_0.16.0_armhf.deb:cca18705ebd83a9ac99af36f1f341fb28561d51d99752cf777bc2e0484f3bebf
0.16.0:gum_0.16.0_Netbsd_arm64.tar.gz:52db6a1c3880032fbf680c307799ec96c6e5bc3c5d5c4215821ebe1e256eaece
0.16.0:gum_0.16.0_Openbsd_x86_64.tar.gz.sbom.json:24f44af429b7f4d90c68706fe4dc19cea745e8bb96e3cc20f56364e0bdc57ed2
0.16.0:gum_0.16.0_Freebsd_i386.tar.gz:d63ad3705a66a98a2ea8ea822a4e2e76e3c970295e899299b6b7aaf115530f4c
0.16.0:gum_0.16.0_Windows_x86_64.zip:b9b4b38ba35ff47c572c4b55ddd0463e2ef3d574cb8701c29253ec64f5c370ed
0.16.0:gum_0.16.0_i386.deb:a2a8ab495ab22ce9b1617bf1e1d20ad508503ee5099d5b2bd6a3c74f224edd75
0.16.0:gum_0.16.0_Openbsd_armv7.tar.gz.sbom.json:c0cc43276857c0d26414a69426c3f72ea209ea875fe82e3d352ea5b629c7ddc7
0.16.0:gum_0.16.0_Freebsd_armv6.tar.gz.sbom.json:d8529c530ebc5863afa9cf9f1f5609dc38252a1cd262ad537be3da678f890fab
0.16.0:gum_0.16.0_Freebsd_x86_64.tar.gz:63eb0ebd97acf4a734d5e550a1f474512e76b950724fab48fb3f6c8ca5b3919e
0.16.0:gum_0.16.0_Linux_armv6.tar.gz:a0208a129845457c77b0ad755546a94b16dd38f8f7181309e14ec91da59271f9
0.16.0:gum_0.16.0_Linux_armv6.tar.gz.sbom.json:19ed2522e39c14dd71a8d6f22469d421cd2289bc590e558fb4ba533d3a922c1b
0.16.0:gum_0.16.0_Netbsd_x86_64.tar.gz:0f8459d4fa2560b588cd7e2af0ecb843bfdb58fb8385e7af1975832b01efdbe5
0.16.0:gum_0.16.0_Openbsd_armv7.tar.gz:21b14534965e097d140c327e920d3193a1e83c59ca487deae9993b900715d833
0.16.0:gum_0.16.0_Darwin_arm64.tar.gz:cc2b557f6b8a0966f15acf7e5bd5c2e1b76f049fa461d205b17927a74f11b283
0.16.0:gum_0.16.0_Freebsd_arm64.tar.gz:a5d9f9443c18a1bb8bb7fa01389b0cef8e968962b600863f830eb702516f53da
0.16.0:gum_0.16.0_Netbsd_armv6.tar.gz:6a9f903e80196624b041315d98435643883e632a306d251365e3d3341e7f0781
0.16.0:gum_0.16.0_Netbsd_armv6.tar.gz.sbom.json:6154f8ccb8b411b34372163c8246392250dbe2351b3d12c9ad1beab6455ef82a
0.16.0:gum_0.16.0_Netbsd_armv7.tar.gz:30680b9d44ec531a40a4f8da94178937a4a877612782d32f76f76d4d45da3dbe
0.16.0:gum_0.16.0_Netbsd_x86_64.tar.gz.sbom.json:6a830148d963b6e301ce99cdcc3c0df39ec448abb43100a826a3674d24b7ac12
0.16.0:gum_0.16.0_Windows_x86_64.zip.sbom.json:2cbca1e38250e902ea80ae5e6935cd3a22c56af6d66d366e4aad11abdc294e33
0.16.0:gum-0.16.0.tar.gz.sbom.json:f0e09a3bf960ae32fc21e59899fd5136b5de4a3e2d35e0e7423b5baea1019278
0.16.0:gum_0.16.0_Freebsd_arm64.tar.gz.sbom.json:64199024046cb01ec513d0fe247388d7852a4d7ff4b38e3280aab048cf85be30
0.16.0:gum_0.16.0_Linux_i386.tar.gz:c2ad09fb568ce05f521a5f59a75c4c8c02bf4ea23f24a9482319b1a327f66561
0.16.0:gum_0.16.0_Netbsd_arm64.tar.gz.sbom.json:9f05c667285042d4ba9a0661b8c04dab50fa1b09a0b638ada4e62cbfab43bedb
0.16.0:gum-0.16.0-1.armv6hl.rpm:9cfa763669b88c32426711c11e0967d2fb82e1143748613a73e6d4b87ca226c3
0.16.0:gum-0.16.0.tar.gz:1e9b47e161dc729dff8ac72197c7716bea967a07956730b2a0f7110b447d6f39
0.16.0:gum_0.16.0_Openbsd_armv6.tar.gz:bceb696aabaf91be3b5e24a9cd8e65ad9949b52c38a047e34552743b0e421d09
0.16.0:gum_0.16.0_armhf6.deb:e6011bcd9c3e0083f622555ab8ad0518a678eedff19141369412ced32cbd23d6
0.16.0:gum_0.16.0_Darwin_x86_64.tar.gz.sbom.json:20cc4c77876be596e570c21f2c84d7a598bcca1b20f41ea983ca3c6c34d3f6ea
0.16.0:gum_0.16.0_Linux_arm64.tar.gz:c28e0a29b5da25df44b95e3f39c773bbb00b9583916431d5e7a762faf011bd0e
0.16.0:gum_0.16.0_x86.apk:0a464fab41626ec9548caf79a2080d6dc55bf806f1749280981263aa9efda9a6
0.16.0:gum_0.16.0_x86_64.apk:3ec90054a510d3889d37c198d36ee006ea72abb38eb7040f3da97fddd838604c
0.16.0:gum-0.16.0-1.aarch64.rpm:35054a3f5f874dda849212ec58dbf6a151bf503e235c1471e572bedcb35f6cab
0.16.0:gum_0.16.0_Freebsd_i386.tar.gz.sbom.json:9137ea6cb017a3d3cde740937e00516236c7706196e182b3c00dcfc433922e3e
0.16.0:gum_0.16.0_Linux_armv7.tar.gz:2ab5da34ae54d459c2e119a4c4de7e3f5e47471d4ad4957e52b54d4289518da5
0.16.0:gum_0.16.0_Linux_i386.tar.gz.sbom.json:f33255781fc65ac8c0982868a90bf7cecb1884e78894bcfebe6c02babba0ca27
0.16.0:gum_0.16.0_Openbsd_armv6.tar.gz.sbom.json:545c5fbc3572cc5f657504eb3aa7b7aea2c030475e4b28ccd557129edcb50cff
0.16.0:gum_0.16.0_amd64.deb:3dd77ffedbc2c02f42f630715fe6b86fe097054fe34f5422d8576b4c6d3725c0
0.16.0:gum_0.16.0_Darwin_x86_64.tar.gz:8009022b373768ff81d80f800cb051b461837bd9ccf7ddd4d42ea159732794d8
0.16.0:gum_0.16.0_Netbsd_i386.tar.gz.sbom.json:f0a53e49f35bfa6ef06f4add5e8e6befcbd3e28ca839b6e7283c6600ef4ea61f
0.16.0:gum_0.16.0_Windows_i386.zip:3730bae084056d5f985b30173a19c43e5878819d782baad1c65e0da216c461e1
0.16.0:gum_0.16.0_Windows_i386.zip.sbom.json:8badb0ccd75d31406a0a25379e5c592f1c3a9b32beba13b0697753caf7e7799e
0.16.0:gum-0.16.0-1.i386.rpm:094e21b9a9d4536941feecbee3115006173390947a915e33bc89aacf3f82aa23
0.16.0:gum_0.16.0_Freebsd_armv7.tar.gz:3bb510506b6e12b28ed86657d935b371fe9f422898c220eceb51b6ed199b47c7
0.16.0:gum_0.16.0_Netbsd_armv7.tar.gz.sbom.json:21cb73cccf513bbdda1e905ed4193d101c3ea0d820f9566a8e0c7dfb15fb2a87
0.16.0:gum_0.16.0_Linux_x86_64.tar.gz.sbom.json:11c1322b24d5adf22472c3031a974d2be6ac3679844e5d7c306ca1398db67fe9
0.16.0:gum_0.16.0_Openbsd_arm64.tar.gz.sbom.json:31c71593345f64fea315873c003c0929d08a18bed0e9a4196cfab62050e8ae4d
0.16.0:gum_0.16.0_Darwin_arm64.tar.gz.sbom.json:fd852994d512face21679ac5fe85d6fdc031ad78f5368c8bab62d0ab93a49da0
0.16.0:gum_0.16.0_Freebsd_armv7.tar.gz.sbom.json:682e07f2647cedca70f085a0f7fe7e69f7926f139e01b98ec8cd624bb353a3ef
0.16.0:gum_0.16.0_Linux_x86_64.tar.gz:7a403e5671bb0e00f93f7b6aa89ec46f7adbda6f7df5c7bad99a01826903b124
0.16.0:gum-0.16.0-1.armv7hl.rpm:34674987d655e5d5defcbef722d47706b991ec57073d7eef998d57c3f6358077
0.16.0:gum-0.16.0-1.x86_64.rpm:a65c2ca8d2c77e2618599bc04f4fa63466c4d2896575b84428709557cc24d54b"

# Find embedded checksum for a given version and filename
find_embedded_checksum() {
  version="$1"
  filename="$2"
  echo "$EMBEDDED_CHECKSUMS" | grep -E "^${version}:${filename}:" | cut -d':' -f3
}

parse_args() {
  BINDIR="${BINSTALLER_BIN:-${HOME}/.local/bin}"
  while getopts "b:dqh?x" arg; do
    case "$arg" in
    b) BINDIR="$OPTARG" ;;
    d) log_set_priority 10 ;;
    q) log_set_priority 3 ;;
    h | \?) usage "$0" ;;
    x) set -x ;;
    esac
  done
  shift $((OPTIND - 1))
  TAG="${1:-v0.16.0}"
}

tag_to_version() {
  if [ "$TAG" = "latest" ]; then
    log_info "checking GitHub for latest tag"
    REALTAG=$(github_release "${REPO}" "${TAG}") && true
    test -n "$REALTAG" || {
      log_crit "Could not determine latest tag for ${REPO}"
      exit 1
    }
  else
    # Assume TAG is a valid tag/version string
    REALTAG="$TAG"
  fi
  if test -z "$REALTAG"; then
    log_crit "unable to find '${TAG}' - use 'latest' or see https://github.com/${REPO}/releases for details"
    exit 1
  fi
  VERSION=${REALTAG#v} # Strip leading 'v'
  TAG="$REALTAG"       # Use the resolved tag
  log_info "Resolved version: ${VERSION} (tag: ${TAG})"
}



resolve_asset_filename() {
  
  # --- Apply Rules ---
  ASSET_FILENAME=""
  if [ "${UNAME_ARCH}" = 'amd64' ] && true
  then
    ARCH='x86_64'
  fi
  if [ "${UNAME_OS}" = 'darwin' ] && true
  then
    OS='Darwin'
  fi
  if [ "${UNAME_OS}" = 'linux' ] && true
  then
    OS='Linux'
  fi
  if [ "${UNAME_OS}" = 'windows' ] && true
  then
    OS='Windows'
  fi
  if [ "${UNAME_OS}" = 'windows' ] && true
  then
    EXT='.zip'
  fi
  if [ -z "${ASSET_FILENAME}" ]; then
    ASSET_FILENAME="gum_${VERSION}_${OS}_${ARCH}${EXT}"
  fi
}

execute() {
  STRIP_COMPONENTS=1
  CHECKSUM_FILENAME="checksums.txt"

  # --- Construct URLs ---
  GITHUB_DOWNLOAD="https://github.com/${REPO}/releases/download"
  ASSET_URL="${GITHUB_DOWNLOAD}/${TAG}/${ASSET_FILENAME}"
  CHECKSUM_URL=""
  if [ -n "$CHECKSUM_FILENAME" ]; then
    CHECKSUM_URL="${GITHUB_DOWNLOAD}/${TAG}/${CHECKSUM_FILENAME}"
  fi

  # --- Download and Verify ---
  TMPDIR=$(mktemp -d)
  trap 'rm -rf -- "$TMPDIR"' EXIT HUP INT TERM
  log_debug "Downloading files into ${TMPDIR}"
  log_info "Downloading ${ASSET_URL}"
  http_download "${TMPDIR}/${ASSET_FILENAME}" "${ASSET_URL}"

  # Try to find embedded checksum first
  EMBEDDED_HASH=$(find_embedded_checksum "$VERSION" "$ASSET_FILENAME")

  if [ -n "$EMBEDDED_HASH" ]; then
    log_info "Using embedded checksum for verification"
    
    # Verify using embedded hash
    got=$(hash_sha256 "${TMPDIR}/${ASSET_FILENAME}")
    if [ "$got" != "$EMBEDDED_HASH" ]; then
      log_crit "Checksum verification failed for ${ASSET_FILENAME}"
      log_crit "Expected: ${EMBEDDED_HASH}"
      log_crit "Got: ${got}"
      return 1
    fi
    log_info "Checksum verification successful"
  elif [ -n "$CHECKSUM_URL" ]; then
    # Fall back to downloading checksum file
    log_info "Downloading checksums from ${CHECKSUM_URL}"
    http_download "${TMPDIR}/${CHECKSUM_FILENAME}" "${CHECKSUM_URL}"
    log_info "Verifying checksum ..."
    hash_verify "${TMPDIR}/${ASSET_FILENAME}" "${TMPDIR}/${CHECKSUM_FILENAME}"
  else
    log_info "No checksum found, skipping verification."
  fi

  if [ -z "${EXT}" ] || [ "${EXT}" = ".exe" ]; then
    log_debug "Target is raw binary"
  else
    log_info "Extracting ${ASSET_FILENAME}..."
    (cd "${TMPDIR}" && untar "${ASSET_FILENAME}" "${STRIP_COMPONENTS}")
  fi
  BINARY_NAME='gum'
  if [ -z "${EXT}" ] || [ "${EXT}" = ".exe" ]; then
    BINARY_PATH="${TMPDIR}/${ASSET_FILENAME}"
  else
    BINARY_PATH="${TMPDIR}/gum"
  fi

  if [ "${UNAME_OS}" = "windows" ]; then
    case "${BINARY_NAME}" in *.exe) ;; *) BINARY_NAME="${BINARY_NAME}.exe" ;; esac
    case "${BINARY_PATH}" in *.exe) ;; *) BINARY_PATH="${BINARY_PATH}.exe" ;; esac
  fi

  if [ ! -f "${BINARY_PATH}" ]; then
    log_crit "Binary not found: ${BINARY_PATH}"
    log_crit "Listing contents of ${TMPDIR} ..."
    if command -v find >/dev/null 2>&1; then
      cd "${TMPDIR}" && find .
    else
      cd "${TMPDIR}" && ls -R .
    fi
    return 1
  fi

  # Install the binary
  INSTALL_PATH="${BINDIR}/${BINARY_NAME}"
  log_info "Installing binary to ${INSTALL_PATH}"
  test ! -d "${BINDIR}" && install -d "${BINDIR}"
  install "${BINARY_PATH}" "${INSTALL_PATH}"
  log_info "${BINARY_NAME} installation complete!"
}

# --- Configuration  ---
NAME='gum'
REPO='charmbracelet/gum'
EXT='.tar.gz'

# use in logging routines
log_prefix() {
  echo "${REPO}"
}

parse_args "$@"

# --- Determine target platform ---
OS="${BINSTALLER_OS:-$(uname_os)}"
UNAME_OS="${OS}"

ARCH="${BINSTALLER_ARCH:-$(uname_arch)}"
UNAME_ARCH="${ARCH}"
log_info "Detected Platform: ${OS}/${ARCH}"

# --- Validate platform ---
uname_os_check "$OS"
uname_arch_check "$ARCH"

tag_to_version

resolve_asset_filename

execute
