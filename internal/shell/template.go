package shell

// mainScriptTemplate is the main body of the installer script.
// It performs runtime detection and resolution.
const mainScriptTemplate = `#!/bin/sh
set -e
# Code generated by binstaller ({{ .BinstallerVersion }}) from {{ .SourceInfo }}. DO NOT EDIT.
#
usage() {
  this=$1
  cat <<EOF
$this: download ${NAME} from ${REPO}

Usage: $this [-b bindir] [-d] [tag]
  -b sets bindir or installation directory, Defaults to ./bin
  -d turns on debug logging
   [tag] is a tag from
   https://github.com/{{ .Repo }}/releases
   If tag is missing, then the latest will be used.

 Generated by binstaller
  https://github.com/haya14busa/binstaller
EOF
  exit 2
}

{{ .ShellFunctions }}

parse_args() {
  # Default values
  BINDIR="./bin"
  while getopts "b:dt:h?x" arg; do
    case "$arg" in
      b) BINDIR="$OPTARG" ;;
      d) log_set_priority 10 ;;
      h | \?) usage "$0" ;;
      x) set -x ;;
    esac
  done
  shift $((OPTIND - 1))
  TAG="${1:-{{- .DefaultVersion | default "latest" -}}}"
}

tag_to_version() {
  if [ "$TAG" = "latest" ]; then
    log_info "checking GitHub for latest tag"
    REALTAG=$(github_release "${REPO}" "${TAG}") && true
    test -n "$REALTAG" || { log_crit "Could not determine latest tag for ${REPO}"; exit 1; }
  else
    # Assume TAG is a valid tag/version string
    REALTAG="$TAG"
  fi
  if test -z "$REALTAG"; then
    log_crit "unable to find '${TAG}' - use 'latest' or see https://github.com/${PREFIX}/releases for details"
    exit 1
  fi
  VERSION=${REALTAG#v} # Strip leading 'v'
  TAG="$REALTAG"       # Use the resolved tag
  log_info "Resolved version: ${VERSION} (tag: ${TAG})"
}
{{ if eq .Asset.NamingConvention.OS "titlecase" }}
capitalize() {
  input="$1"
  first_char=$(printf "%s" "$input" | cut -c1)
  first_upper=$(printf "%s" "$first_char" | tr '[:lower:]' '[:upper:]')
  printf "%s%s\n" "$first_upper" $(printf "%s" "$input" | cut -c2-)
}
{{- end }}

resolve_asset_filename() {
  {{ if eq .Asset.NamingConvention.OS "titlecase" -}}
  OS=$(capitalize $OS)
  {{- end }}
  # --- Apply Rules ---
  ASSET_FILENAME=""
  {{- with .Asset.Rules }}
  {{- range . }}
  if {{- if .When.OS }} [ "${UNAME_OS}" = '{{.When.OS}}' ] && {{- end }}
      {{- if .When.Arch }} [ "${UNAME_ARCH}" = '{{.When.Arch}}' ] && {{- end }}
      {{- " true" }}; then {{- "\n   " -}}
    {{- if .OS }} OS='{{ .OS }}' {{- end }}
    {{- if .Arch }} ARCH='{{ .Arch }}' {{- end }}
    {{- if .Ext }} EXT='{{ .Ext }}' {{- end }}
    {{- if .Template }} ASSET_FILENAME="{{ .Template }}" {{- end }}
  fi
  {{- end }}
  {{- end }}
  if [ -z "${ASSET_FILENAME}" ]; then
    ASSET_FILENAME="{{ .Asset.Template }}"
  fi
}

execute() {
  STRIP_COMPONENTS={{ if .Unpack }}{{ .Unpack.StripComponents | default 0 }}{{ else }}0{{ end }}
  CHECKSUM_FILENAME="{{ if .Checksums }}{{ .Checksums.Template }}{{ end }}"

  # --- Construct URLs ---
  GITHUB_DOWNLOAD="https://github.com/${REPO}/releases/download"
  ASSET_URL="${GITHUB_DOWNLOAD}/${TAG}/${ASSET_FILENAME}"
  CHECKSUM_URL=""
  if [ -n "$CHECKSUM_FILENAME" ]; then
    CHECKSUM_URL="${GITHUB_DOWNLOAD}/${TAG}/${CHECKSUM_FILENAME}"
  fi

  # --- Download and Verify ---
  tmpdir=$(mktemp -d)
  log_debug "Downloading files into ${tmpdir}"
  log_info "Downloading ${ASSET_URL}"
  http_download "${tmpdir}/${ASSET_FILENAME}" "${ASSET_URL}" || { rm -rf "${tmpdir}"; exit 1; }

  if [ -n "$CHECKSUM_URL" ]; then
    # Download checksum file
    log_info "Downloading checksums from ${CHECKSUM_URL}"
    http_download "${tmpdir}/${CHECKSUM_FILENAME}" "${CHECKSUM_URL}" || { rm -rf "${tmpdir}"; exit 1; }
    log_info "Verifying checksum ..."
    hash_sha256_verify "${tmpdir}/${ASSET_FILENAME}" "${tmpdir}/${CHECKSUM_FILENAME}" || { rm -rf "${tmpdir}"; exit 1; }
  else
    log_info "No checksum URL or embedded hash found, skipping verification."
  fi

  # --- Extract and Install ---
  log_info "Extracting ${ASSET_FILENAME}..."
  (cd "${tmpdir}" && untar "${ASSET_FILENAME}" "${STRIP_COMPONENTS}") || { rm -rf "${tmpdir}"; exit 1; }

  # Determine binary name based on spec
  BINARY_NAME="${NAME}"
  INSTALL_BIN_NAME="$BINARY_NAME"
  if [ "$OS" = "windows" ]; then
     case "$INSTALL_BIN_NAME" in *.exe) ;; *) INSTALL_BIN_NAME="${INSTALL_BIN_NAME}.exe" ;; esac
  fi

  # Find the binary
  extracted_binary_path=""
  if [ -f "${tmpdir}/${BINARY_NAME}" ]; then
     extracted_binary_path="${tmpdir}/${BINARY_NAME}"
  elif [ "$OS" = "windows" ] && [ -f "${tmpdir}/${BINARY_NAME}.exe" ]; then
     extracted_binary_path="${tmpdir}/${BINARY_NAME}.exe"
  else
     log_debug "Searching for ${BINARY_NAME} (or .exe) in subdirectories..."
     found_path=$(find "${tmpdir}" -name "${BINARY_NAME}" -type f -print -quit)
     if [ -z "$found_path" ] && [ "$OS" = "windows" ]; then
        found_path=$(find "${tmpdir}" -name "${BINARY_NAME}.exe" -type f -print -quit)
     fi
     if [ -n "$found_path" ]; then extracted_binary_path="$found_path"; fi
  fi

  if [ -z "$extracted_binary_path" ]; then
      log_crit "Could not find binary '${BINARY_NAME}' after extraction in ${tmpdir}"
      rm -rf "${tmpdir}"; exit 1
  fi
  log_debug "Found binary at: ${extracted_binary_path}"

  # Install the binary
  install_path="${BINDIR}/${INSTALL_BIN_NAME}"
  log_info "Installing binary to ${install_path}"
  test ! -d "${BINDIR}" && install -d "${BINDIR}"
  install "${extracted_binary_path}" "${install_path}"
  log_info "${NAME} installation complete!"

  # --- Cleanup ---
  rm -rf "${tmpdir}"
}

# --- Configuration  ---
NAME="{{ .Name }}"
REPO="{{ .Repo }}"
EXT="{{ .Asset.DefaultExtension }}"
PREFIX="${REPO}"

# use in logging routines
log_prefix() {
  echo "$PREFIX"
}

parse_args "$@"

# --- Determine target platform ---
OS=$(uname_os)
ARCH=$(uname_arch)
UNAME_OS="${OS}"
UNAME_ARCH="${ARCH}"
log_info "Detected Platform: ${OS}/${ARCH}"

# --- Validate platform ---
uname_os_check "$OS"
uname_arch_check "$ARCH"

tag_to_version

resolve_asset_filename

execute
`
