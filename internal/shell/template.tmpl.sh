#!/bin/sh
set -e
# Code generated by binstaller. DO NOT EDIT.
#
usage() {
  this=$1
  cat <<EOF
$this: download ${NAME} from ${REPO}

Usage: $this [-b bindir] [-d] [tag]
  -b sets bindir or installation directory, Defaults to ./bin
  -d turns on debug logging
   [tag] is a tag from
   https://github.com/{{ .Repo }}/releases
   If tag is missing, then the latest will be used.

 Generated by binstaller
  https://github.com/haya14busa/binstaller
EOF
  exit 2
}

{{ .Shlib }}

{{ .HashFunctions }}

{{ .ShellFunctions }}

parse_args() {
  BINDIR="./bin"
  while getopts "b:dh?x" arg; do
    case "$arg" in
    b) BINDIR="$OPTARG" ;;
    d) log_set_priority 10 ;;
    h | \?) usage "$0" ;;
    x) set -x ;;
    esac
  done
  shift $((OPTIND - 1))
  TAG="${1:-{{- .DefaultVersion | default "latest" -}}}"
}

tag_to_version() {
  if [ "$TAG" = "latest" ]; then
    log_info "checking GitHub for latest tag"
    REALTAG=$(github_release "${REPO}" "${TAG}") && true
    test -n "$REALTAG" || {
      log_crit "Could not determine latest tag for ${REPO}"
      exit 1
    }
  else
    # Assume TAG is a valid tag/version string
    REALTAG="$TAG"
  fi
  if test -z "$REALTAG"; then
    log_crit "unable to find '${TAG}' - use 'latest' or see https://github.com/${REPO}/releases for details"
    exit 1
  fi
  VERSION=${REALTAG#v} # Strip leading 'v'
  TAG="$REALTAG"       # Use the resolved tag
  log_info "Resolved version: ${VERSION} (tag: ${TAG})"
}
{{ if eq .Asset.NamingConvention.OS "titlecase" }}
capitalize() {
  input="$1"
  first_char=$(printf "%s" "$input" | cut -c1)
  first_upper=$(printf "%s" "$first_char" | tr '[:lower:]' '[:upper:]')
  printf "%s%s\n" "$first_upper" "$(printf "%s" "$input" | cut -c2-)"
}
{{- end }}

resolve_asset_filename() {
  {{ if eq .Asset.NamingConvention.OS "titlecase" -}}
  OS="$(capitalize "${OS}")"
  {{- end }}
  # --- Apply Rules ---
  ASSET_FILENAME=""
  {{- with .Asset.Rules }}
  {{- range . }}
  if
    {{- if .When.OS }} [ "${UNAME_OS}" = '{{.When.OS}}' ] && {{- end }}
    {{- if .When.Arch }} [ "${UNAME_ARCH}" = '{{.When.Arch}}' ] && {{- end }}
    {{- " true" }}
  then
    {{- "\n   " -}}
    {{- if .OS }} OS='{{ .OS }}' {{- end }}
    {{- if .Arch }} ARCH='{{ .Arch }}' {{- end }}
    {{- if .Ext }} EXT='{{ .Ext }}' {{- end }}
    {{- if .Template }} ASSET_FILENAME="{{ .Template }}" {{- end }}
    {{- range $i, $binary := .Binaries }}
    BINARY_NAME_{{ $i }}={{ $binary.Name }}
    BINARY_PATH_{{ $i }}={{ $binary.Path }}
    {{- end }}
  fi
  {{- end }}
  {{- end }}
  if [ -z "${ASSET_FILENAME}" ]; then
    ASSET_FILENAME="{{ .Asset.Template }}"
  fi
}

execute() {
  STRIP_COMPONENTS={{ if .Unpack }}{{ .Unpack.StripComponents | default 0 }}{{ else }}0{{ end }}
  CHECKSUM_FILENAME="{{ if .Checksums }}{{ .Checksums.Template }}{{ end }}"

  # --- Construct URLs ---
  GITHUB_DOWNLOAD="https://github.com/${REPO}/releases/download"
  ASSET_URL="${GITHUB_DOWNLOAD}/${TAG}/${ASSET_FILENAME}"
  CHECKSUM_URL=""
  if [ -n "$CHECKSUM_FILENAME" ]; then
    CHECKSUM_URL="${GITHUB_DOWNLOAD}/${TAG}/${CHECKSUM_FILENAME}"
  fi

  # --- Download and Verify ---
  TMPDIR=$(mktemp -d)
  trap 'rm -rf -- "$TMPDIR"' EXIT HUP INT TERM
  log_debug "Downloading files into ${TMPDIR}"
  log_info "Downloading ${ASSET_URL}"
  http_download "${TMPDIR}/${ASSET_FILENAME}" "${ASSET_URL}"

  if [ -n "$CHECKSUM_URL" ]; then
    # Download checksum file
    log_info "Downloading checksums from ${CHECKSUM_URL}"
    http_download "${TMPDIR}/${CHECKSUM_FILENAME}" "${CHECKSUM_URL}"
    log_info "Verifying checksum ..."
    hash_verify "${TMPDIR}/${ASSET_FILENAME}" "${TMPDIR}/${CHECKSUM_FILENAME}"
  else
    log_info "No checksum URL or embedded hash found, skipping verification."
  fi

  if [ -z "${EXT}" ] || [ "${EXT}" = ".exe" ]; then
    log_debug "Target is raw binary"
  else
    log_info "Extracting ${ASSET_FILENAME}..."
    (cd "${TMPDIR}" && untar "${ASSET_FILENAME}" "${STRIP_COMPONENTS}")
  fi

  {{- range $i, $binary := .Asset.Binaries }}
  BINARY_NAME='{{ $binary.Name }}'
  if [ "${UNAME_OS}" = "windows" ]; then
    case "${BINARY_NAME}" in *.exe) ;; *) BINARY_NAME="${BINARY_NAME}.exe" ;; esac
  fi

  if [ -z "${EXT}" ] || [ "${EXT}" = ".exe" ]; then
    BINARY_PATH="${TMPDIR}/${ASSET_FILENAME}"
  else
    BINARY_PATH="${TMPDIR}/{{ $binary.Path }}"
    if [ "${UNAME_OS}" = "windows" ]; then
      case "${BINARY_PATH}" in *.exe) ;; *) BINARY_PATH="${BINARY_PATH}.exe" ;; esac
    fi
  fi

  {{- if (hasBinaryOverride $.Asset) }}
  if [ -n "$BINARY_NAME_{{ $i }}" ]; then
    BINARY_NAME="$BINARY_NAME_{{ $i }}"
  fi
  if [ -n "$BINARY_PATH_{{ $i }}" ]; then
    BINARY_NAME="$BINARY_PATH_{{ $i }}"
  fi
  {{- end }}

  # Install the binary
  INSTALL_PATH="${BINDIR}/${BINARY_NAME}"
  log_info "Installing binary to ${INSTALL_PATH}"
  test ! -d "${BINDIR}" && install -d "${BINDIR}"
  install "${BINARY_PATH}" "${INSTALL_PATH}"
  log_info "${NAME} installation complete!"
  {{- end }}
}

# --- Configuration  ---
NAME='{{ .Name }}'
REPO='{{ .Repo }}'
EXT='{{ .Asset.DefaultExtension }}'

# use in logging routines
log_prefix() {
  echo "${REPO}"
}

parse_args "$@"

# --- Determine target platform ---
OS="${BINSTALLER_OS:-$(uname_os)}"
ARCH="${BINSTALLER_ARCH:-$(uname_arch)}"
UNAME_OS="${OS}"
{{ with .Asset.Rules }}
{{- range . }}
{{- if .When.Arch -}} UNAME_ARCH="${ARCH}" {{- break }}{{ end }}
{{- end }}
{{- end }}
log_info "Detected Platform: ${OS}/${ARCH}"

# --- Validate platform ---
uname_os_check "$OS"
uname_arch_check "$ARCH"

tag_to_version

resolve_asset_filename

execute
