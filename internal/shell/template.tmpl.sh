#!/bin/sh
# Code generated by binstaller. DO NOT EDIT.
#
set -e
usage() {
  this=$1
  cat <<EOF
$this: download ${NAME} from ${REPO}

Usage: $this [-b bindir] [-d] [-n|--dry-run]{{- if not .TargetVersion }} [tag]{{- end }}
  -b sets bindir or installation directory, Defaults to {{ deref .DefaultBinDir }}
  -d turns on debug logging
  -n, --dry-run dry run mode - show what would be done without actually doing it
  {{- if .TargetVersion }}
   This installer is configured for {{ .TargetVersion }} only.
  {{- else }}
   [tag] is a tag from
   https://github.com/{{ deref .Repo }}/releases
   If tag is missing, then the latest will be used.
  {{- end }}

 Generated by binstaller
  https://github.com/binary-install/binstaller
EOF
  exit 2
}

{{ .Shlib }}

{{ .HashFunctions }}

{{ .ShellFunctions }}

# --- Embedded Checksums (Format: VERSION:FILENAME:HASH) ---
EMBEDDED_CHECKSUMS="
{{- if .Checksums -}}
{{- range $version, $checksums := .Checksums.EmbeddedChecksums }}
{{- range $checksum := $checksums }}
{{ trimPrefix $version "v" }}:{{ deref $checksum.Filename }}:{{ deref $checksum.Hash }}
{{- end }}
{{- end }}
{{- end }}"

# Find embedded checksum for a given version and filename
find_embedded_checksum() {
  version="$1"
  filename="$2"
  echo "$EMBEDDED_CHECKSUMS" | grep -E "^${version}:${filename}:" | cut -d':' -f3
}

parse_args() {
  BINDIR="{{ deref .DefaultBinDir }}"
  DRY_RUN=false
  
  # Handle long options before getopts
  FILTERED_ARGS=""
  for arg in "$@"; do
    case "$arg" in
    --dry-run)
      DRY_RUN=true
      ;;
    *)
      FILTERED_ARGS="$FILTERED_ARGS $arg"
      ;;
    esac
  done
  
  # Reset positional parameters with filtered args
  eval set -- "$FILTERED_ARGS"
  
  while getopts "b:dqh?xn" arg; do
    case "$arg" in
    b) BINDIR="$OPTARG" ;;
    d) log_set_priority 10 ;;
    q) log_set_priority 3 ;;
    h | \?) usage "$0" ;;
    x) set -x ;;
    n) DRY_RUN=true ;;
    esac
  done
  shift $((OPTIND - 1))
  {{- if .TargetVersion }}
  TAG="{{ .TargetVersion }}"
  {{- else }}
  TAG="${1:-{{- deref .DefaultVersion | default "latest" -}}}"
  {{- end }}
}

tag_to_version() {
  {{- if .TargetVersion }}
  # Target version is set at generation time
  REALTAG="{{ .TargetVersion }}"
  VERSION=${REALTAG#v} # Strip leading 'v'
  TAG="$REALTAG"
  log_info "Installing ${NAME} version ${VERSION}"
  {{- else }}
  if [ "$TAG" = "latest" ]; then
    log_info "checking GitHub for latest tag"
    REALTAG=$(github_release "${REPO}" "${TAG}") && true
    test -n "$REALTAG" || {
      log_crit "Could not determine latest tag for ${REPO}"
      exit 1
    }
  else
    # Assume TAG is a valid tag/version string
    REALTAG="$TAG"
  fi
  if test -z "$REALTAG"; then
    log_crit "unable to find '${TAG}' - use 'latest' or see https://github.com/${REPO}/releases for details"
    exit 1
  fi
  VERSION=${REALTAG#v} # Strip leading 'v'
  TAG="$REALTAG"       # Use the resolved tag
  log_info "Resolved version: ${VERSION} (tag: ${TAG})"
  {{- end }}
}
{{ if eq (deref .Asset.NamingConvention.OS) "titlecase" }}
capitalize() {
  input="$1"
  first_char=$(printf "%s" "$input" | cut -c1)
  first_upper=$(printf "%s" "$first_char" | tr '[:lower:]' '[:upper:]')
  printf "%s%s\n" "$first_upper" "$(printf "%s" "$input" | cut -c2-)"
}
{{- end }}
{{ if and .Asset.ArchEmulation (deref .Asset.ArchEmulation.Rosetta2) }}
is_rosetta2_available() {
  [ "$(uname -s)" = Darwin ]  || return 1
  [ "$(uname -m)" = arm64 ]   || return 1
  arch -arch x86_64 true 2>/dev/null
}
{{- end }}

resolve_asset_filename() {
  {{ if eq (deref .Asset.NamingConvention.OS) "titlecase" -}}
  OS="$(capitalize "${OS}")"
  {{- end }}
  # --- Apply Rules ---
  ASSET_FILENAME=""
  {{- with .Asset.Rules }}
  {{- range . }}
  if
    {{- if .When.OS }} [ "${UNAME_OS}" = '{{deref .When.OS}}' ] && {{- end }}
    {{- if .When.Arch }} [ "${UNAME_ARCH}" = '{{deref .When.Arch}}' ] && {{- end }}
    {{- " true" }}
  then
    {{- "\n   " -}}
    {{- if .OS }} OS='{{ deref .OS }}' {{- end }}
    {{- if .Arch }} ARCH='{{ deref .Arch }}' {{- end }}
    {{- if .EXT }} EXT='{{ deref .EXT }}' {{- end }}
    {{- if .Template }} ASSET_FILENAME="{{ deref .Template }}" {{- end }}
    {{- range $i, $binary := .Binaries }}
    BINARY_NAME_{{ $i }}={{ deref $binary.Name }}
    BINARY_PATH_{{ $i }}={{ deref $binary.Path }}
    {{- end }}
  fi
  {{- end }}
  {{- end }}
  if [ -z "${ASSET_FILENAME}" ]; then
    ASSET_FILENAME="{{ deref .Asset.Template }}"
  fi
}

execute() {
  STRIP_COMPONENTS={{ if .Unpack }}{{ deref .Unpack.StripComponents | default 0 }}{{ else }}0{{ end }}
  CHECKSUM_FILENAME="{{ if .Checksums }}{{ deref .Checksums.Template }}{{ end }}"

  # --- Construct URLs ---
  GITHUB_DOWNLOAD="https://github.com/${REPO}/releases/download"
  ASSET_URL="${GITHUB_DOWNLOAD}/${TAG}/${ASSET_FILENAME}"
  CHECKSUM_URL=""
  if [ -n "$CHECKSUM_FILENAME" ]; then
    CHECKSUM_URL="${GITHUB_DOWNLOAD}/${TAG}/${CHECKSUM_FILENAME}"
  fi

  # --- Dry Run Mode ---
  if [ "$DRY_RUN" = "true" ]; then
    log_info "[DRY RUN] Detected OS: ${OS}"
    log_info "[DRY RUN] Detected Architecture: ${ARCH}"
    log_info "[DRY RUN] Would download: ${ASSET_URL}"
    if [ -n "$CHECKSUM_URL" ]; then
      log_info "[DRY RUN] Would verify checksum from: ${CHECKSUM_URL}"
    elif [ -n "$(find_embedded_checksum "$VERSION" "$ASSET_FILENAME")" ]; then
      log_info "[DRY RUN] Would verify checksum using embedded checksums"
    else
      log_info "[DRY RUN] Would skip checksum verification (no checksum available)"
    fi
    
    {{- range $i, $binary := .Asset.Binaries }}
    BINARY_NAME='{{ deref $binary.Name }}'
    {{- if (hasBinaryOverride $.Asset) }}
    if [ -n "$BINARY_NAME_{{ $i }}" ]; then
      BINARY_NAME="$BINARY_NAME_{{ $i }}"
    fi
    {{- end }}
    if [ "${UNAME_OS}" = "windows" ]; then
      case "${BINARY_NAME}" in *.exe) ;; *) BINARY_NAME="${BINARY_NAME}.exe" ;; esac
    fi
    log_info "[DRY RUN] Would install ${BINARY_NAME} to: ${BINDIR}/${BINARY_NAME}"
    {{- end }}
    
    log_info "[DRY RUN] Installation would complete successfully"
    return 0
  fi

  # --- Download and Verify ---
  TMPDIR=$(mktemp -d)
  trap 'rm -rf -- "$TMPDIR"' EXIT HUP INT TERM
  log_debug "Downloading files into ${TMPDIR}"
  log_info "Downloading ${ASSET_URL}"
  github_http_download "${TMPDIR}/${ASSET_FILENAME}" "${ASSET_URL}"

  # Try to find embedded checksum first
  EMBEDDED_HASH=$(find_embedded_checksum "$VERSION" "$ASSET_FILENAME")

  if [ -n "$EMBEDDED_HASH" ]; then
    log_info "Using embedded checksum for verification"
    
    # Verify using embedded hash
    got=$(hash_compute "${TMPDIR}/${ASSET_FILENAME}")
    if [ "$got" != "$EMBEDDED_HASH" ]; then
      log_crit "Checksum verification failed for ${ASSET_FILENAME}"
      log_crit "Expected: ${EMBEDDED_HASH}"
      log_crit "Got: ${got}"
      return 1
    fi
    log_info "Checksum verification successful"
  elif [ -n "$CHECKSUM_URL" ]; then
    # Fall back to downloading checksum file
    log_info "Downloading checksums from ${CHECKSUM_URL}"
    github_http_download "${TMPDIR}/${CHECKSUM_FILENAME}" "${CHECKSUM_URL}"
    log_info "Verifying checksum ..."
    hash_verify "${TMPDIR}/${ASSET_FILENAME}" "${TMPDIR}/${CHECKSUM_FILENAME}"
  else
    log_info "No checksum found, skipping verification."
  fi

  if [ -z "${EXT}" ] || [ "${EXT}" = ".exe" ]; then
    log_debug "Target is raw binary"
  else
    log_info "Extracting ${ASSET_FILENAME}..."
    (cd "${TMPDIR}" && untar "${ASSET_FILENAME}" "${STRIP_COMPONENTS}")
  fi

  {{- range $i, $binary := .Asset.Binaries }}
  BINARY_NAME='{{ deref $binary.Name }}'
  if [ -z "${EXT}" ] || [ "${EXT}" = ".exe" ]; then
    BINARY_PATH="${TMPDIR}/${ASSET_FILENAME}"
  else
    BINARY_PATH="${TMPDIR}/{{ deref $binary.Path }}"
  fi
  {{- if (hasBinaryOverride $.Asset) }}
  if [ -n "$BINARY_NAME_{{ $i }}" ]; then
    BINARY_NAME="$BINARY_NAME_{{ $i }}"
  fi
  if [ -n "$BINARY_PATH_{{ $i }}" ]; then
    BINARY_PATH="${TMPDIR}/$BINARY_PATH_{{ $i }}"
  fi
  {{- end }}

  if [ "${UNAME_OS}" = "windows" ]; then
    case "${BINARY_NAME}" in *.exe) ;; *) BINARY_NAME="${BINARY_NAME}.exe" ;; esac
    case "${BINARY_PATH}" in *.exe) ;; *) BINARY_PATH="${BINARY_PATH}.exe" ;; esac
  fi

  if [ ! -f "${BINARY_PATH}" ]; then
    log_crit "Binary not found: ${BINARY_PATH}"
    log_crit "Listing contents of ${TMPDIR} ..."
    if command -v find >/dev/null 2>&1; then
      cd "${TMPDIR}" && find .
    else
      cd "${TMPDIR}" && ls -R .
    fi
    return 1
  fi

  # Install the binary
  INSTALL_PATH="${BINDIR}/${BINARY_NAME}"
  log_info "Installing binary to ${INSTALL_PATH}"
  test ! -d "${BINDIR}" && install -d "${BINDIR}"
  install "${BINARY_PATH}" "${INSTALL_PATH}"
  log_info "${BINARY_NAME} installation complete!"
  {{- end }}
}

# --- Configuration  ---
NAME='{{ deref .Name }}'
REPO='{{ deref .Repo }}'
EXT='{{ deref .Asset.DefaultExtension }}'

# use in logging routines
log_prefix() {
  echo "${REPO}"
}

parse_args "$@"

# --- Determine target platform ---
OS="${BINSTALLER_OS:-$(uname_os)}"
UNAME_OS="${OS}"
{{ if and .Asset.ArchEmulation (deref .Asset.ArchEmulation.Rosetta2) }}
if is_rosetta2_available; then
  log_info 'Apple Silicon with Rosetta 2 found: using amd64 as ARCH'
	ARCH="${BINSTALLER_ARCH:-amd64}"
else
	ARCH="${BINSTALLER_ARCH:-$(uname_arch)}"
fi
{{ else }}
ARCH="${BINSTALLER_ARCH:-$(uname_arch)}"
{{- end }}
{{ with .Asset.Rules }}
{{- range . }}
{{- if .When.Arch -}} UNAME_ARCH="${ARCH}" {{- break }}{{ end }}
{{- end }}
{{- end }}
log_info "Detected Platform: ${OS}/${ARCH}"

# --- Validate platform ---
uname_os_check "$OS"
uname_arch_check "$ARCH"

tag_to_version

resolve_asset_filename

execute
