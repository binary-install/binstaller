package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"go/format"
	"log"
	"os"
	"path/filepath"
	"sort"
	"text/template"
)

const outputTemplate = `// Code generated by genplatforms-typespec from TypeSpec schema. DO NOT EDIT.

package asset

import (
	"github.com/binary-install/binstaller/pkg/spec"
)

// GetAllOSValues returns all possible OS values from spec constants
func GetAllOSValues() []spec.SupportedPlatformOS {
	return []spec.SupportedPlatformOS{
{{- range .OSValues }}
		spec.{{ . }},
{{- end }}
	}
}

// GetAllArchValues returns all possible Arch values from spec constants
func GetAllArchValues() []spec.SupportedPlatformArch {
	return []spec.SupportedPlatformArch{
{{- range .ArchValues }}
		spec.{{ . }},
{{- end }}
	}
}

// GetAllPlatformConstants returns all OS and Arch constants as string slices
func GetAllPlatformConstants() ([]string, []string) {
	var osValues []string
	var archValues []string

	// Convert typed constants to strings
	for _, os := range GetAllOSValues() {
		osValues = append(osValues, string(os))
	}
	
	for _, arch := range GetAllArchValues() {
		archValues = append(archValues, string(arch))
	}
	
	return osValues, archValues
}
`

type templateData struct {
	OSValues   []string
	ArchValues []string
}

type platformSchema struct {
	Type       string `json:"type"`
	Properties struct {
		OS struct {
			AnyOf []struct {
				Type  string `json:"type"`
				Const string `json:"const"`
			} `json:"anyOf"`
		} `json:"os"`
		Arch struct {
			AnyOf []struct {
				Type  string `json:"type"`
				Const string `json:"const"`
			} `json:"anyOf"`
		} `json:"arch"`
	} `json:"properties"`
}

func main() {
	if len(os.Args) < 3 {
		log.Fatal("Usage: genplatforms-typespec <json-schema-dir> <output-file>")
	}

	jsonSchemaDir := os.Args[1]
	outputFile := os.Args[2]

	// Read the Platform.json schema file
	platformFile := filepath.Join(jsonSchemaDir, "Platform.json")
	data, err := os.ReadFile(platformFile)
	if err != nil {
		log.Fatalf("Failed to read %s: %v", platformFile, err)
	}

	// Parse the JSON schema
	var schema platformSchema
	if err := json.Unmarshal(data, &schema); err != nil {
		log.Fatalf("Failed to parse JSON schema: %v", err)
	}

	// Extract OS values
	osValues := extractConstValues(schema.Properties.OS.AnyOf)
	
	// Extract Arch values
	archValues := extractConstValues(schema.Properties.Arch.AnyOf)

	// Map the values to Go constant names
	osConstants := mapToGoConstants(osValues, osMapping)
	archConstants := mapToGoConstants(archValues, archMapping)

	// Sort for consistent output
	sort.Strings(osConstants)
	sort.Strings(archConstants)

	// Generate code
	tmplData := templateData{
		OSValues:   osConstants,
		ArchValues: archConstants,
	}

	tmpl, err := template.New("platforms").Parse(outputTemplate)
	if err != nil {
		log.Fatalf("Failed to parse template: %v", err)
	}

	var buf bytes.Buffer
	if err := tmpl.Execute(&buf, tmplData); err != nil {
		log.Fatalf("Failed to execute template: %v", err)
	}

	// Format the generated code
	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatalf("Failed to format generated code: %v", err)
	}

	// Write to file
	if err := os.WriteFile(outputFile, formatted, 0644); err != nil {
		log.Fatalf("Failed to write output file: %v", err)
	}

	fmt.Printf("Generated %s with %d OS values and %d Arch values from TypeSpec schema\n", 
		outputFile, len(osConstants), len(archConstants))
}

// extractConstValues extracts const values from JSON schema anyOf array
func extractConstValues(anyOf []struct {
	Type  string `json:"type"`
	Const string `json:"const"`
}) []string {
	var values []string
	for _, item := range anyOf {
		if item.Const != "" {
			values = append(values, item.Const)
		}
	}
	return values
}

// mapToGoConstants maps JSON schema values to Go constant names
func mapToGoConstants(values []string, mapping map[string]string) []string {
	var constants []string
	for _, value := range values {
		if goName, ok := mapping[value]; ok {
			constants = append(constants, goName)
		} else {
			log.Printf("Warning: No mapping found for value: %s", value)
		}
	}
	return constants
}

// Mapping from JSON schema values to Go constant names
var osMapping = map[string]string{
	"linux":     "Linux",
	"darwin":    "Darwin",
	"windows":   "Windows",
	"freebsd":   "Freebsd",
	"openbsd":   "Openbsd",
	"netbsd":    "Netbsd",
	"dragonfly": "Dragonfly",
	"solaris":   "Solaris",
	"android":   "Android",
	"aix":       "AIX",
	"illumos":   "Illumos",
	"ios":       "Ios",
	"js":        "JS",
	"plan9":     "Plan9",
	"wasip1":    "Wasip1",
}

var archMapping = map[string]string{
	"amd64":    "Amd64",
	"arm64":    "Arm64",
	"386":      "The386",
	"arm":      "Arm",
	"armv5":    "Armv5",
	"armv6":    "Armv6",
	"armv7":    "Armv7",
	"ppc64":    "Ppc64",
	"ppc64le":  "Ppc64LE",
	"mips":     "MIPS",
	"mipsle":   "Mipsle",
	"mips64":   "Mips64",
	"mips64le": "Mips64LE",
	"s390x":    "S390X",
	"riscv64":  "Riscv64",
	"loong64":  "Loong64",
	"wasm":     "WASM",
	"amd64p32": "Amd64P32",
}